{"version":3,"file":"components/vant-weapp/dist/field/index.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wx-Fruit/._src_components_vant-weapp_dist_common_utils.js","webpack://wx-Fruit/._src_components_vant-weapp_dist_common_validator.js","webpack://wx-Fruit/._src_components_vant-weapp_dist_field_index.js","webpack://wx-Fruit/._src_components_vant-weapp_dist_field_props.js"],"sourcesContent":["import { isDef, isNumber, isPlainObject, isPromise } from './validator';\nimport { canIUseGroupSetData, canIUseNextTick } from './version';\nexport { isDef } from './validator';\nexport { getSystemInfoSync } from './version';\nexport function range(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n}\nexport function nextTick(cb) {\n    if (canIUseNextTick()) {\n        wx.nextTick(cb);\n    }\n    else {\n        setTimeout(() => {\n            cb();\n        }, 1000 / 30);\n    }\n}\nexport function addUnit(value) {\n    if (!isDef(value)) {\n        return undefined;\n    }\n    value = String(value);\n    return isNumber(value) ? `${value}px` : value;\n}\nexport function requestAnimationFrame(cb) {\n    return setTimeout(() => {\n        cb();\n    }, 1000 / 30);\n}\nexport function pickExclude(obj, keys) {\n    if (!isPlainObject(obj)) {\n        return {};\n    }\n    return Object.keys(obj).reduce((prev, key) => {\n        if (!keys.includes(key)) {\n            prev[key] = obj[key];\n        }\n        return prev;\n    }, {});\n}\nexport function getRect(context, selector) {\n    return new Promise((resolve) => {\n        wx.createSelectorQuery()\n            .in(context)\n            .select(selector)\n            .boundingClientRect()\n            .exec((rect = []) => resolve(rect[0]));\n    });\n}\nexport function getAllRect(context, selector) {\n    return new Promise((resolve) => {\n        wx.createSelectorQuery()\n            .in(context)\n            .selectAll(selector)\n            .boundingClientRect()\n            .exec((rect = []) => resolve(rect[0]));\n    });\n}\nexport function groupSetData(context, cb) {\n    if (canIUseGroupSetData()) {\n        context.groupSetData(cb);\n    }\n    else {\n        cb();\n    }\n}\nexport function toPromise(promiseLike) {\n    if (isPromise(promiseLike)) {\n        return promiseLike;\n    }\n    return Promise.resolve(promiseLike);\n}\nexport function getCurrentPage() {\n    const pages = getCurrentPages();\n    return pages[pages.length - 1];\n}\n","// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(val) {\n    return typeof val === 'function';\n}\nexport function isPlainObject(val) {\n    return val !== null && typeof val === 'object' && !Array.isArray(val);\n}\nexport function isPromise(val) {\n    return isPlainObject(val) && isFunction(val.then) && isFunction(val.catch);\n}\nexport function isDef(value) {\n    return value !== undefined && value !== null;\n}\nexport function isObj(x) {\n    const type = typeof x;\n    return x !== null && (type === 'object' || type === 'function');\n}\nexport function isNumber(value) {\n    return /^\\d+(\\.\\d+)?$/.test(value);\n}\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\nconst IMAGE_REGEXP = /\\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i;\nconst VIDEO_REGEXP = /\\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv)/i;\nexport function isImageUrl(url) {\n    return IMAGE_REGEXP.test(url);\n}\nexport function isVideoUrl(url) {\n    return VIDEO_REGEXP.test(url);\n}\n","import { nextTick } from '../common/utils';\nimport { VantComponent } from '../common/component';\nimport { commonProps, inputProps, textareaProps } from './props';\nVantComponent({\n    field: true,\n    classes: ['input-class', 'right-icon-class', 'label-class'],\n    props: Object.assign(Object.assign(Object.assign(Object.assign({}, commonProps), inputProps), textareaProps), { size: String, icon: String, label: String, error: Boolean, center: Boolean, isLink: Boolean, leftIcon: String, rightIcon: String, autosize: null, required: Boolean, iconClass: String, clickable: Boolean, inputAlign: String, customStyle: String, errorMessage: String, arrowDirection: String, showWordLimit: Boolean, errorMessageAlign: String, readonly: {\n            type: Boolean,\n            observer: 'setShowClear',\n        }, clearable: {\n            type: Boolean,\n            observer: 'setShowClear',\n        }, clearTrigger: {\n            type: String,\n            value: 'focus',\n        }, border: {\n            type: Boolean,\n            value: true,\n        }, titleWidth: {\n            type: String,\n            value: '6.2em',\n        }, clearIcon: {\n            type: String,\n            value: 'clear',\n        }, extraEventParams: {\n            type: Boolean,\n            value: false,\n        } }),\n    data: {\n        focused: false,\n        innerValue: '',\n        showClear: false,\n    },\n    created() {\n        this.value = this.data.value;\n        this.setData({ innerValue: this.value });\n    },\n    methods: {\n        formatValue(value) {\n            const { maxlength } = this.data;\n            if (maxlength !== -1 && value.length > maxlength) {\n                return value.slice(0, maxlength);\n            }\n            return value;\n        },\n        onInput(event) {\n            const { value = '' } = event.detail || {};\n            const formatValue = this.formatValue(value);\n            this.value = formatValue;\n            this.setShowClear();\n            return this.emitChange(Object.assign(Object.assign({}, event.detail), { value: formatValue }));\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.setShowClear();\n            this.$emit('focus', event.detail);\n        },\n        onBlur(event) {\n            this.focused = false;\n            this.setShowClear();\n            this.$emit('blur', event.detail);\n        },\n        onClickIcon() {\n            this.$emit('click-icon');\n        },\n        onClickInput(event) {\n            this.$emit('click-input', event.detail);\n        },\n        onClear() {\n            this.setData({ innerValue: '' });\n            this.value = '';\n            this.setShowClear();\n            nextTick(() => {\n                this.emitChange({ value: '' });\n                this.$emit('clear', '');\n            });\n        },\n        onConfirm(event) {\n            const { value = '' } = event.detail || {};\n            this.value = value;\n            this.setShowClear();\n            this.$emit('confirm', value);\n        },\n        setValue(value) {\n            this.value = value;\n            this.setShowClear();\n            if (value === '') {\n                this.setData({ innerValue: '' });\n            }\n            this.emitChange({ value });\n        },\n        onLineChange(event) {\n            this.$emit('linechange', event.detail);\n        },\n        onKeyboardHeightChange(event) {\n            this.$emit('keyboardheightchange', event.detail);\n        },\n        emitChange(detail) {\n            const { extraEventParams } = this.data;\n            this.setData({ value: detail.value });\n            let result;\n            const data = extraEventParams\n                ? Object.assign(Object.assign({}, detail), { callback: (data) => {\n                        result = data;\n                    } }) : detail.value;\n            this.$emit('input', data);\n            this.$emit('change', data);\n            return result;\n        },\n        setShowClear() {\n            const { clearable, readonly, clearTrigger } = this.data;\n            const { focused, value } = this;\n            let showClear = false;\n            if (clearable && !readonly) {\n                const hasValue = !!value;\n                const trigger = clearTrigger === 'always' || (clearTrigger === 'focus' && focused);\n                showClear = hasValue && trigger;\n            }\n            this.setData({ showClear });\n        },\n        noop() { },\n    },\n});\n","export const commonProps = {\n    value: {\n        type: String,\n        observer(value) {\n            if (value !== this.value) {\n                this.setData({ innerValue: value });\n                this.value = value;\n            }\n        },\n    },\n    placeholder: String,\n    placeholderStyle: String,\n    placeholderClass: String,\n    disabled: Boolean,\n    maxlength: {\n        type: Number,\n        value: -1,\n    },\n    cursorSpacing: {\n        type: Number,\n        value: 50,\n    },\n    autoFocus: Boolean,\n    focus: Boolean,\n    cursor: {\n        type: Number,\n        value: -1,\n    },\n    selectionStart: {\n        type: Number,\n        value: -1,\n    },\n    selectionEnd: {\n        type: Number,\n        value: -1,\n    },\n    adjustPosition: {\n        type: Boolean,\n        value: true,\n    },\n    holdKeyboard: Boolean,\n};\nexport const inputProps = {\n    type: {\n        type: String,\n        value: 'text',\n    },\n    password: Boolean,\n    confirmType: String,\n    confirmHold: Boolean,\n    alwaysEmbed: Boolean,\n};\nexport const textareaProps = {\n    autoHeight: Boolean,\n    fixed: Boolean,\n    showConfirmBar: {\n        type: Boolean,\n        value: true,\n    },\n    disableDefaultPadding: {\n        type: Boolean,\n        value: true,\n    },\n};\n"],"names":[],"sourceRoot":""}